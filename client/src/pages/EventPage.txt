import axios from "axios";
import { useEffect, useState } from "react";
import { Link, useParams } from "react-router-dom";
import { AiFillCalendar, AiOutlineClockCircle, AiFillStar } from "react-icons/ai";
import { MdLocationPin } from "react-icons/md";
import { FaFacebook, FaTwitter, FaWhatsapp, FaLinkedin } from "react-icons/fa";
import { motion } from "framer-motion";
import img1 from "../assets/hero.jpg";
import { IoMdArrowBack } from "react-icons/io";

export default function EventPage() {
  const { id } = useParams();
  const [event, setEvent] = useState(null);
  const [img, setImg] = useState();
  const [timeLeft, setTimeLeft] = useState("");
  const [similarEvents, setSimilarEvents] = useState([]);
  const [reviews, setReviews] = useState([]);
  const [newReview, setNewReview] = useState({ rating: 0, comment: "", user: "" });

  useEffect(() => {
    if (!id) return;

    axios
      .get(`http://localhost:4000/api/events/${id}`)
      .then((response) => {
        const imageUrl = response.data.imageUrl
          ? `http://localhost:4000${response.data.imageUrl.replace(/\\/g, "/")}`
          : img1;
        setImg(imageUrl);
        setEvent(response.data);

        // Fetch Similar Events
        return axios.get(`http://localhost:4000/api/events?category=${response.data.category}`);
      })
      .then((res) => setSimilarEvents(res.data.filter((e) => e._id !== id)))
      .catch((error) => console.error("Error fetching event:", error));

    // Fetch Reviews
    axios
      .get(`http://localhost:4000/api/feedback/event/${id}`)
      .then((response) => setReviews(response.data))
      .catch((error) => console.error("Error fetching reviews:", error));
  }, [id]);

  useEffect(() => {
    if (!event) return;
    const eventDate = new Date(event.eventDate).getTime();
    const interval = setInterval(() => {
      const now = new Date().getTime();
      const difference = eventDate - now;
      
      if (difference <= 0) {
        setTimeLeft("Event is Live!");
        clearInterval(interval);
      } else {
        const days = Math.floor(difference / (1000 * 60 * 60 * 24));
        const hours = Math.floor((difference % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
        const minutes = Math.floor((difference % (1000 * 60 * 60)) / (1000 * 60));
        setTimeLeft(`${days}d ${hours}h ${minutes}m left`);
      }
    }, 1000);

    return () => clearInterval(interval);
  }, [event]);

  if (!event)
    return <div className="text-center mt-10 text-lg font-semibold text-gray-700">Loading event details...</div>;

  // Handle Star Click for Rating
  const handleStarClick = (rating) => {
    setNewReview({ ...newReview, rating });
  };

  // Handle Review Submission
  const handleReviewSubmit = (e) => {
    e.preventDefault();

    if (!newReview.user || !newReview.comment || newReview.rating === 0) {
      alert("Please fill in all fields and select a rating.");
      return;
    }

    setReviews([...reviews, newReview]); // Add new review
    setNewReview({ user: "", comment: "", rating: 0 }); // Reset form
  };

  // Calculate Average Rating
  const averageRating =
    reviews.length > 0 ? (reviews.reduce((acc, review) => acc + review.rating, 0) / reviews.length).toFixed(1) : 0;

  const shareUrl = window.location.href;

  return (
    <motion.div className="w-[975px] max-w-full mx-auto mt-10 p-6 bg-white shadow-xl rounded-lg mb-20">
      {/* Back button */}
      <div className="flex justify-between items-center mb-8">
        <Link to="/">
          <button className="inline-flex gap-2 px-4 py-3 bg-blue-600 text-white font-semibold rounded-lg shadow-md hover:bg-blue-700 transition duration-300">
            <IoMdArrowBack className="w-6 h-6" /> Back
          </button>
        </Link>
      </div>

      {/* Hero Image */}
      <div className="relative w-full h-[400px] rounded-lg overflow-hidden shadow-md">
        <img src={img} alt="Event" className="w-full h-full object-cover" />
        <div className="absolute inset-0 bg-gradient-to-b from-transparent to-black opacity-40"></div>
      </div>

      {/* Event Title & Booking */}
      <div className="flex flex-col md:flex-row justify-between items-center mt-6">
        <h1 className="text-4xl font-bold text-gray-900">{event.title}</h1>
        <Link to={`/event/${event._id}/ordersummary`}>
          <motion.button className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg shadow-md transition-all">
            Book Tickets
          </motion.button>
        </Link>
      </div>

      <div className="text-xl font-semibold text-gray-800 mt-3">Price : ₹{event.ticketPrice || 0}</div>

      {/* Description */}
      <div className="mt-8 bg-gray-50 p-6 rounded-lg shadow">
        <h2 className="text-2xl font-bold">About This Event</h2>
        <p className="text-gray-700 mt-2">{event.description}</p>
      </div>

      {/* Event Details */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mt-6 md:mb-3">
        <div className="flex items-center bg-gray-100 p-4 rounded-lg shadow">
          <AiFillCalendar className="text-blue-600 text-3xl" />
          <div className="ml-3">
            <h2 className="text-lg font-bold">Date</h2>
            <p>{event.eventDate.split("T")[0]}</p>
          </div>
        </div>
        <div className="flex items-center bg-gray-100 p-4 rounded-lg shadow">
          <AiOutlineClockCircle className="text-blue-600 text-3xl" />
          <div className="ml-3">
            <h2 className="text-lg font-bold">Time</h2>
            <p>{event.eventTime}</p>
          </div>
        </div>
        <div className="flex items-center bg-gray-100 p-4 rounded-lg shadow">
          <MdLocationPin className="text-blue-600 text-3xl" />
          <div className="ml-3">
            <h2 className="text-lg font-bold">City</h2>
            <p>{event.location}</p>
          </div>
        </div>
      </div>
        <div className="flex items-center bg-gray-100 p-4 rounded-lg shadow">
          <MdLocationPin className="text-blue-600 text-3xl" />
          <div className="ml-3">
            <h2 className="text-lg font-bold">Address</h2>
            <p>{event.address}</p>
          </div>
        </div>

      {/* Countdown Timer */}
      <div className="mt-6 bg-red-100 p-4 rounded-lg text-red-600 font-semibold text-lg">
        ⏳ Hurry! {timeLeft}
      </div>

      {/* Map */}
      <div className="mt-6 rounded-lg overflow-hidden shadow-md">
        <iframe
          width="100%"
          height="300"
          frameBorder="0"
          src={`https://www.google.com/maps?q=${encodeURIComponent(event.location)}&output=embed`}
          allowFullScreen
        ></iframe>
      </div>

      {/* Similar Events */}
      <div className="mt-10">
        <h2 className="text-2xl font-bold">Similar Events</h2>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mt-4">
          {similarEvents.slice(0, 3).map((similarEvent) => (
            <div key={similarEvent._id} className="bg-gray-100 p-4 rounded-lg shadow-lg">
              <img 
                src={similarEvent.imageUrl ? `http://localhost:4000${similarEvent.imageUrl.replace(/\\/g, "/")}` : img1} 
                alt={similarEvent.title} 
                className="w-full h-40 object-cover rounded-md"
              />
              <div className="mt-3">
                <h3 className="text-lg font-semibold">{similarEvent.title}</h3>
                <p className="text-gray-600 flex items-center gap-1">
                  <MdLocationPin className="text-red-500" /> {similarEvent.location}
                </p>
                <Link to={`/event/${similarEvent._id}`} className="text-blue-600 font-semibold mt-2 block hover:underline">
                  View Event
                </Link>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Refund Policy */}
      <div className="mt-6">
        <h2 className="text-xl font-bold text-red-500">Refund Policy</h2>
        <p className="text-gray-700">Refunds up to 7 days before the event. Eventbrite's fee is non-refundable.</p>
      </div>

      {/* Social Share Buttons */}
      <div className="mt-6 flex gap-4">
        <a href={`https://www.facebook.com/sharer/sharer.php?u=${shareUrl}`} target="_blank" rel="noopener noreferrer">
          <FaFacebook className="text-blue-600 text-3xl hover:scale-110 transition-all" />
        </a>
        <a href={`https://twitter.com/intent/tweet?url=${shareUrl}`} target="_blank" rel="noopener noreferrer">
          <FaTwitter className="text-blue-400 text-3xl hover:scale-110 transition-all" />
        </a>
        <a href={`https://api.whatsapp.com/send?text=${shareUrl}`} target="_blank" rel="noopener noreferrer">
          <FaWhatsapp className="text-green-500 text-3xl hover:scale-110 transition-all" />
        </a>
        <a href={`https://www.linkedin.com/sharing/share-offsite/?url=${shareUrl}`} target="_blank" rel="noopener noreferrer">
          <FaLinkedin className="text-blue-700 text-3xl hover:scale-110 transition-all" />
        </a>
      </div>

      {/* Reviews Section */}
      <div className="mt-10 bg-gray-50 p-6 rounded-lg shadow">
      <h2 className="text-2xl font-bold">Ratings & Reviews</h2>

      {/* Average Rating and Total Reviews */}
      {reviews.length > 0 && (
        <div className="flex items-center mt-2">
          <AiFillStar className="text-yellow-500 text-2xl" />
          <span className="ml-2 text-lg font-semibold">{averageRating} / 5</span>
          <span className="ml-3 text-gray-600">({reviews.length} reviews)</span>
        </div>
      )}

      {/* Display Reviews */}
      {reviews.map((review, index) => (
        <div key={index} className="bg-white p-4 rounded-lg shadow mt-4">
          <div className="flex items-center">
            <AiFillStar className="text-yellow-500 text-xl" />
            <span className="text-lg font-semibold ml-2">{review.rating} / 5</span>
          </div>
          <p className="text-gray-700 mt-2">{review.comment}</p>
          <p className="text-sm text-gray-500">— {review.user}</p>
        </div>
      ))}

      {/* Review Submission Form */}
      <form className="mt-6" onSubmit={handleReviewSubmit}>
        {/* Star Rating Selection */}
        <div className="flex space-x-2 mb-4">
          {Array.from({ length: 5 }, (_, i) => (
            <button
              type="button"
              key={i}
              onClick={() => handleStarClick(i + 1)}
              className="text-2xl focus:outline-none"
            >
              {i < newReview.rating ? (
                <AiFillStar className="text-yellow-500" />
              ) : (
                <AiOutlineStar className="text-gray-400 hover:text-yellow-500 transition-all duration-200" />
              )}
            </button>
          ))}
          <span className="ml-2 text-lg text-gray-700">{newReview.rating} / 5</span>
        </div>

        {/* Name & Comment Input */}
        <input
          type="text"
          placeholder="Your Name"
          className="border p-2 w-full rounded"
          value={newReview.user}
          onChange={(e) => setNewReview({ ...newReview, user: e.target.value })}
          required
        />
        <textarea
          placeholder="Write a review..."
          className="border p-2 w-full rounded mt-2"
          value={newReview.comment}
          onChange={(e) => setNewReview({ ...newReview, comment: e.target.value })}
          required
        />

        <button type="submit" className="bg-blue-600 text-white px-4 py-2 rounded mt-2 w-full">
          Submit Review
        </button>
      </form>
    </div>
    </motion.div>
  );
}
